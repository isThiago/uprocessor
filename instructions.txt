Formatos de Instrução:

[1]: imm (15-4)                                               | opcode (3-0)
[2]: imm (15-8)                   | reg1 (7-5) | funct1 (4)   | opcode (3-0)
[3]: funct8 (15-8)                | reg1 (7-5) | funct1 (4)   | opcode (3-0)
[4]: imm (15-7)                                | funct3 (6-4) | opcode (3-0)
[5]: funct5 (15-11) | reg2 (10-8) | reg1 (7-5) | funct1 (4)   | opcode (3-0)


Legenda:

c: bits ocupados por constantes imediatas;
r: bits que endereçam registradores;
x: bits irrelevantes.


Instruções:

nop:           0000 0011 1000 0001 [1]
> Não faz nada.


add  A, Rn:    0000 0000 rrr0 0000 [3]
> Acrescenta o valor em Rn ao valor no acumulador.

sub  A, Rn:    0000 0001 rrr0 0000 [3]
> Subtrai o valor em Rn do valor no acumulador.

sub  Rn, A:    0000 0001 rrr1 0000 [3]
> Guarda no acumulador o valor em Rn subtraído do valor no acumulador.

cmp  A, Rn:    0000 0010 rrr0 0000 [3]
> Atualiza flags conforme subtração do valor em Rn do valor no acumulador sem
  guardar o resultado no acumulador.

cmp  Rn, A:    0000 0010 rrr1 0000 [3]
> Atualiza flags conforme subtração do valor no acumulador do valor em Rn sem
  guardar o resultado no acumulador.

mul  A, Rn:    0000 0000 rrr0 0010 [3]
> Multiplica o valor no acumulador pelo valor em Rn.

mov  A, Rn:    0000 0000 rrr0 0011 [3]
> Substitui o valor no acumulador pelo valor em Rn.

mov  Rn, A:    0000 0000 rrr1 0011 [3]
> Substitui o valor em Rn pelo valor no acumulador.


addi A, imm12: cccc cccc cccc 1000 [1]
> Acrescenta uma constante imediata ao valor no acumulador.

muli A, imm12: cccc cccc cccc 1010 [1]
> Multiplica o valor no acumulador por uma constante imediata.

ld   A, imm8:  cccc cccc xxx0 1001 [2]
> Substitui o valor no acumulador por uma constante imediata.

ld   Rn, imm8: cccc cccc rrr1 1001 [2]
> Substitui o valor em Rn por uma constante imediata.


j    label:    0000 cccc cccc 1100 [1]
> Salta para a instrução endereçada por label.


beq  label:    cccc cccc c000 1101 [4]
> Salta para a instrução endereçada por label se Z = 1.

bne  label:    cccc cccc c001 1101 [4]
> Salta para a instrução endereçada por label se Z = 0.

blt  label:    cccc cccc c010 1101 [4]
> Salta para a instrução endereçada por label se C = 1.

ble  label:    cccc cccc c011 1101 [4]
> Salta para a instrução endereçada por label se Z = 1 ou C = 1.

bgt  label:    cccc cccc c100 1101 [4]
> Salta para a instrução endereçada por label se Z = 0 e C = 0.

bge  label:    cccc cccc c101 1101 [4]
> Salta para a instrução endereçada por label se C = 0.

* Obs: antes de saltos condicionais, deve-se utilizar a instrução cmp para
  atualizar as flags Z e C.


lw   Rn, (Rm): 0000 0rrr rrr0 0100 [5]
> Carrega dado lido no endereço da RAM apontado por Rm em Rn.

sw   Rn, (Rm): 0000 1rrr rrr0 0100 [5]
> Carrega dado lido em Rn no endereço da RAM apontado por Rm.


ctz  A, Rn:    0000 0011 rrr0 0000 []
> Guarda no acumulador a quantidade de bits 0 contíguos a partir do LSB do valor
  em Rn.
